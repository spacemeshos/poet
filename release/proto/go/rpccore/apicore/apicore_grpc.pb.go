// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rpccore/apicore/apicore.proto

package apicore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoetCoreProverClient is the client API for PoetCoreProver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoetCoreProverClient interface {
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
	GetNIP(ctx context.Context, in *GetNIPRequest, opts ...grpc.CallOption) (*GetNIPResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type poetCoreProverClient struct {
	cc grpc.ClientConnInterface
}

func NewPoetCoreProverClient(cc grpc.ClientConnInterface) PoetCoreProverClient {
	return &poetCoreProverClient{cc}
}

func (c *poetCoreProverClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/apicore.PoetCoreProver/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) GetNIP(ctx context.Context, in *GetNIPRequest, opts ...grpc.CallOption) (*GetNIPResponse, error) {
	out := new(GetNIPResponse)
	err := c.cc.Invoke(ctx, "/apicore.PoetCoreProver/GetNIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/apicore.PoetCoreProver/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoetCoreProverServer is the server API for PoetCoreProver service.
// All implementations should embed UnimplementedPoetCoreProverServer
// for forward compatibility
type PoetCoreProverServer interface {
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
	GetNIP(context.Context, *GetNIPRequest) (*GetNIPResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedPoetCoreProverServer should be embedded to have forward compatible implementations.
type UnimplementedPoetCoreProverServer struct {
}

func (UnimplementedPoetCoreProverServer) Compute(context.Context, *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (UnimplementedPoetCoreProverServer) GetNIP(context.Context, *GetNIPRequest) (*GetNIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNIP not implemented")
}
func (UnimplementedPoetCoreProverServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

// UnsafePoetCoreProverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoetCoreProverServer will
// result in compilation errors.
type UnsafePoetCoreProverServer interface {
	mustEmbedUnimplementedPoetCoreProverServer()
}

func RegisterPoetCoreProverServer(s grpc.ServiceRegistrar, srv PoetCoreProverServer) {
	s.RegisterService(&PoetCoreProver_ServiceDesc, srv)
}

func _PoetCoreProver_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicore.PoetCoreProver/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_GetNIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).GetNIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicore.PoetCoreProver/GetNIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).GetNIP(ctx, req.(*GetNIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicore.PoetCoreProver/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoetCoreProver_ServiceDesc is the grpc.ServiceDesc for PoetCoreProver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoetCoreProver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apicore.PoetCoreProver",
	HandlerType: (*PoetCoreProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _PoetCoreProver_Compute_Handler,
		},
		{
			MethodName: "GetNIP",
			Handler:    _PoetCoreProver_GetNIP_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PoetCoreProver_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpccore/apicore/apicore.proto",
}

// PoetVerifierClient is the client API for PoetVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoetVerifierClient interface {
	VerifyNIP(ctx context.Context, in *VerifyNIPRequest, opts ...grpc.CallOption) (*VerifyNIPResponse, error)
}

type poetVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewPoetVerifierClient(cc grpc.ClientConnInterface) PoetVerifierClient {
	return &poetVerifierClient{cc}
}

func (c *poetVerifierClient) VerifyNIP(ctx context.Context, in *VerifyNIPRequest, opts ...grpc.CallOption) (*VerifyNIPResponse, error) {
	out := new(VerifyNIPResponse)
	err := c.cc.Invoke(ctx, "/apicore.PoetVerifier/VerifyNIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoetVerifierServer is the server API for PoetVerifier service.
// All implementations should embed UnimplementedPoetVerifierServer
// for forward compatibility
type PoetVerifierServer interface {
	VerifyNIP(context.Context, *VerifyNIPRequest) (*VerifyNIPResponse, error)
}

// UnimplementedPoetVerifierServer should be embedded to have forward compatible implementations.
type UnimplementedPoetVerifierServer struct {
}

func (UnimplementedPoetVerifierServer) VerifyNIP(context.Context, *VerifyNIPRequest) (*VerifyNIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyNIP not implemented")
}

// UnsafePoetVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoetVerifierServer will
// result in compilation errors.
type UnsafePoetVerifierServer interface {
	mustEmbedUnimplementedPoetVerifierServer()
}

func RegisterPoetVerifierServer(s grpc.ServiceRegistrar, srv PoetVerifierServer) {
	s.RegisterService(&PoetVerifier_ServiceDesc, srv)
}

func _PoetVerifier_VerifyNIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetVerifierServer).VerifyNIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicore.PoetVerifier/VerifyNIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetVerifierServer).VerifyNIP(ctx, req.(*VerifyNIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoetVerifier_ServiceDesc is the grpc.ServiceDesc for PoetVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoetVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apicore.PoetVerifier",
	HandlerType: (*PoetVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyNIP",
			Handler:    _PoetVerifier_VerifyNIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpccore/apicore/apicore.proto",
}
