// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

package service

import (
	"github.com/spacemeshos/go-scale"
)

func (t *PoetProofMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := t.GossipPoetProof.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeByteSlice(enc, t.ServicePubKey); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeString(enc, t.RoundID); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeByteSlice(enc, t.Signature); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *PoetProofMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if n, err := t.GossipPoetProof.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}
	if field, n, err := scale.DecodeByteSlice(dec); err != nil {
		return total, err
	} else {
		total += n
		t.ServicePubKey = field
	}
	if field, n, err := scale.DecodeString(dec); err != nil {
		return total, err
	} else {
		total += n
		t.RoundID = field
	}
	if field, n, err := scale.DecodeByteSlice(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Signature = field
	}
	return total, nil
}

func (t *GossipPoetProof) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := t.MerkleProof.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeSliceOfByteSlice(enc, t.Members); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeCompact64(enc, uint64(t.NumLeaves)); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *GossipPoetProof) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if n, err := t.MerkleProof.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}
	if field, n, err := scale.DecodeSliceOfByteSlice(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Members = field
	}
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.NumLeaves = uint64(field)
	}
	return total, nil
}
