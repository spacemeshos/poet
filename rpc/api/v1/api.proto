syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";

package rpc.api.v1;

service PoetService {
    // /**
    // Start is used to start the service.
    // */
    // rpc Start (StartRequest) returns (StartResponse) {
    //     option (google.api.http) = {
    //         post: "/v1/start",
    //         body: "*",
    //     };
    // }

    // /**
    // UpdateGateway allows to update the list of gateway addresses,
    // similar to the Start rpc, but after the service already started.
    // */
    // rpc UpdateGateway (UpdateGatewayRequest) returns (UpdateGatewayResponse) {
    //     option (google.api.http) = {
    //         post: "/v1/updategateway",
    //         body: "*",
    //     };
    // }

    /**
    Submit adds a challenge to the service's current open round,
    to be included its later generated proof.
    */
    rpc Submit (SubmitRequest) returns (SubmitResponse) {
        option (google.api.http) = {
            post: "/v1/submit",
            body: "*",
        };
    }

    /**
    GetInfo returns general information concerning the service,
    including its identity pubkey.
    */
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    /**
    GetProof returns the generated proof for given round id.
    */
    rpc GetProof(GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/v1/proofs/{round_id}"
        };
    }
}

message StartRequest {
    repeated string gateway_addresses = 1;
    int32 conn_acks_threshold = 2;
}

message StartResponse {
}

message UpdateGatewayRequest {
    repeated string gateway_addresses = 1;
    int32 conn_acks_threshold = 2;
}

message UpdateGatewayResponse {
}

message SubmitRequest {
    bytes challenge = 1;
    bytes signature = 2;
}

message SubmitResponse {
    string round_id = 1;
    bytes hash = 2;
    google.protobuf.Duration round_end = 3;
}

message GetInfoRequest {
}

message GetInfoResponse {
    string open_round_id = 1;
    repeated string executing_rounds_ids = 2;
    bytes service_pubkey = 3;
}

message MembershipProof {
    int32 index = 1;
    bytes root = 2;
    repeated bytes proof = 3;
}

message MerkleProof {
    bytes root = 1;
    repeated bytes proven_leaves = 2;
    repeated bytes proof_nodes = 3;
}

message PoetProof {
    MerkleProof proof = 1;
    repeated bytes members = 2;
    uint64 leaves = 3;
}

message GetProofRequest {
    string round_id = 1;
}

message GetProofResponse {
    PoetProof proof = 1;
    bytes pubkey = 2;
}
