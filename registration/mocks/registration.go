// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/poet/registration (interfaces: WorkerService)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/registration.go . WorkerService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	shared "github.com/spacemeshos/poet/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// ExecuteRound mocks base method.
func (m *MockWorkerService) ExecuteRound(arg0 context.Context, arg1 uint, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteRound indicates an expected call of ExecuteRound.
func (mr *MockWorkerServiceMockRecorder) ExecuteRound(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRound", reflect.TypeOf((*MockWorkerService)(nil).ExecuteRound), arg0, arg1, arg2)
}

// RegisterForProofs mocks base method.
func (m *MockWorkerService) RegisterForProofs(arg0 context.Context) <-chan shared.NIP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterForProofs", arg0)
	ret0, _ := ret[0].(<-chan shared.NIP)
	return ret0
}

// RegisterForProofs indicates an expected call of RegisterForProofs.
func (mr *MockWorkerServiceMockRecorder) RegisterForProofs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForProofs", reflect.TypeOf((*MockWorkerService)(nil).RegisterForProofs), arg0)
}
