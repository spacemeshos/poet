// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/poet/registration (interfaces: PowVerifier)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/pow_verifier.go . PowVerifier
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	registration "github.com/spacemeshos/poet/registration"
	gomock "go.uber.org/mock/gomock"
)

// MockPowVerifier is a mock of PowVerifier interface.
type MockPowVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockPowVerifierMockRecorder
}

// MockPowVerifierMockRecorder is the mock recorder for MockPowVerifier.
type MockPowVerifierMockRecorder struct {
	mock *MockPowVerifier
}

// NewMockPowVerifier creates a new mock instance.
func NewMockPowVerifier(ctrl *gomock.Controller) *MockPowVerifier {
	mock := &MockPowVerifier{ctrl: ctrl}
	mock.recorder = &MockPowVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPowVerifier) EXPECT() *MockPowVerifierMockRecorder {
	return m.recorder
}

// Params mocks base method.
func (m *MockPowVerifier) Params() registration.PowParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(registration.PowParams)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockPowVerifierMockRecorder) Params() *PowVerifierParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockPowVerifier)(nil).Params))
	return &PowVerifierParamsCall{Call: call}
}

// PowVerifierParamsCall wrap *gomock.Call
type PowVerifierParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PowVerifierParamsCall) Return(arg0 registration.PowParams) *PowVerifierParamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PowVerifierParamsCall) Do(f func() registration.PowParams) *PowVerifierParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PowVerifierParamsCall) DoAndReturn(f func() registration.PowParams) *PowVerifierParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetParams mocks base method.
func (m *MockPowVerifier) SetParams(arg0 registration.PowParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", arg0)
}

// SetParams indicates an expected call of SetParams.
func (mr *MockPowVerifierMockRecorder) SetParams(arg0 any) *PowVerifierSetParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockPowVerifier)(nil).SetParams), arg0)
	return &PowVerifierSetParamsCall{Call: call}
}

// PowVerifierSetParamsCall wrap *gomock.Call
type PowVerifierSetParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PowVerifierSetParamsCall) Return() *PowVerifierSetParamsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PowVerifierSetParamsCall) Do(f func(registration.PowParams)) *PowVerifierSetParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PowVerifierSetParamsCall) DoAndReturn(f func(registration.PowParams)) *PowVerifierSetParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockPowVerifier) Verify(arg0, arg1 []byte, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPowVerifierMockRecorder) Verify(arg0, arg1, arg2 any) *PowVerifierVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPowVerifier)(nil).Verify), arg0, arg1, arg2)
	return &PowVerifierVerifyCall{Call: call}
}

// PowVerifierVerifyCall wrap *gomock.Call
type PowVerifierVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PowVerifierVerifyCall) Return(arg0 error) *PowVerifierVerifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PowVerifierVerifyCall) Do(f func([]byte, []byte, uint64) error) *PowVerifierVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PowVerifierVerifyCall) DoAndReturn(f func([]byte, []byte, uint64) error) *PowVerifierVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
